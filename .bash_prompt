# bash prompt settings from
# https://techcommons.stanford.edu/topics/git/show-git-branch-bash-prompt
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt
function parse_git_branch {

        git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \[\1\]/'

}

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
  tput sgr0
  if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
    ORANGE=$(tput setaf 172)
    PURPLE=$(tput setaf 141)
    WHITE=$(tput setaf 0)
  else
    ORANGE=$(tput setaf 4)
    PURPLE=$(tput setaf 1)
    WHITE=$(tput setaf 7)
  fi
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
else
  ORANGE="\033[1;33m"
  PURPLE="\033[1;35m"
  WHITE="\033[1;37m"
  BOLD=""
  RESET="\033[m"
fi

export ORANGE
export PURPLE
export WHITE
export BOLD
export RESET

function proml {
  local  LIGHT_GRAY="\[\033[0;37m\]"
# OPTIONAL - if you want to use any of these other colors:
  local  WHITE="\[\033[1;37m\]"
  local  TEAL="\[\033[1;36m\]"

# END OPTIONAL

  local     DEFAULT="\[\033[0m\]"

#PS1="\h:\W \u$BLUE\$(parse_git_branch) $DEFAULT\$"
PS1="\w::$ORANGE\$(parse_git_branch)::$LIGHT_GRAY\$"
}

proml

# alternate bash prompt settings from
# https://github.com/alexreisner/dotfiles

#    #!/usr/bin/env bash
#
#    parse_git_branch() {
#      if [ $(uname) == "Darwin" ]; then
#        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
#      else
#        __git_ps1 '(%s)'
#      fi
#    }
#
#    # allow switching to simple prompt (no Git info) when working with big Git repo
#    function psnogit() {
#      PROMPT_COMMAND=
#      GIT_PS1_SHOWDIRTYSTATE=
#      PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#    }
#
#    function psgit(){
#      PROMPT_COMMAND='RET=$?'
#      # include modified/staged indicator in __git_ps1 output
#      GIT_PS1_SHOWDIRTYSTATE=yes
#      last_return='$((( RET )) && printf ":\[\033[1;31m\]$RET\[\033[0m\]")'
#      PS1="\[\033[00;33m\]\u@\h\[\033[00m\]${last_return}:\w\[\033[0;32m\]\$(parse_git_branch)\[\033[0m\]\\$ "
#      unset last_return
#    }
#
#    psgit


